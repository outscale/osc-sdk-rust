/*
 * 3DS OUTSCALE API
 *
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.26
 * Contact: support@outscale.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ReadConsumptionAccountRequest {
    /// If true, checks whether you have the required permissions to perform the action.
    #[serde(rename = "DryRun", skip_serializing_if = "Option::is_none")]
    pub dry_run: Option<bool>,
    #[serde(rename = "FromDate")]
    pub from_date: Box<crate::models::ReadConsumptionAccountRequestFromDate>,
    /// By default or if false, returns only the consumption of the specific account that sends this request. If true, returns either the overall consumption of your paying account and all linked accounts (if the account that sends this request is a paying account) or returns nothing (if the account that sends this request is a linked account).
    #[serde(rename = "Overall", skip_serializing_if = "Option::is_none")]
    pub overall: Option<bool>,
    #[serde(rename = "ToDate")]
    pub to_date: Box<crate::models::ReadConsumptionAccountRequestToDate>,
}

impl ReadConsumptionAccountRequest {
    pub fn new(
        from_date: crate::models::ReadConsumptionAccountRequestFromDate,
        to_date: crate::models::ReadConsumptionAccountRequestToDate,
    ) -> ReadConsumptionAccountRequest {
        ReadConsumptionAccountRequest {
            dry_run: None,
            from_date: Box::new(from_date),
            overall: None,
            to_date: Box::new(to_date),
        }
    }
}
