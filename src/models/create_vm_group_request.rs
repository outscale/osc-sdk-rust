/*
 * 3DS OUTSCALE API
 *
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.26
 * Contact: support@outscale.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreateVmGroupRequest {
    /// A description for the VM group.
    #[serde(rename = "Description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// If true, checks whether you have the required permissions to perform the action.
    #[serde(rename = "DryRun", skip_serializing_if = "Option::is_none")]
    pub dry_run: Option<bool>,
    /// The positioning strategy of VMs on hypervisors. By default, or if set to `no-strategy` our orchestrator determines the most adequate position for your VMs. If set to `attract`, your VMs are deployed on the same hypervisor, which improves network performance. If set to `repulse`, your VMs are deployed on a different hypervisor, which improves fault tolerance.
    #[serde(
        rename = "PositioningStrategy",
        skip_serializing_if = "Option::is_none"
    )]
    pub positioning_strategy: Option<PositioningStrategy>,
    /// One or more IDs of security groups for the VM group.
    #[serde(rename = "SecurityGroupIds")]
    pub security_group_ids: Vec<String>,
    /// The ID of the Subnet in which you want to create the VM group.
    #[serde(rename = "SubnetId")]
    pub subnet_id: String,
    /// One or more tags to add to the VM group.
    #[serde(rename = "Tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::ResourceTag>>,
    /// The number of VMs deployed in the VM group.
    #[serde(rename = "VmCount")]
    pub vm_count: i32,
    /// The name of the VM group.
    #[serde(rename = "VmGroupName")]
    pub vm_group_name: String,
    /// The ID of the VM template used to launch VMs in the VM group.
    #[serde(rename = "VmTemplateId")]
    pub vm_template_id: String,
}

impl CreateVmGroupRequest {
    pub fn new(
        security_group_ids: Vec<String>,
        subnet_id: String,
        vm_count: i32,
        vm_group_name: String,
        vm_template_id: String,
    ) -> CreateVmGroupRequest {
        CreateVmGroupRequest {
            description: None,
            dry_run: None,
            positioning_strategy: None,
            security_group_ids,
            subnet_id,
            tags: None,
            vm_count,
            vm_group_name,
            vm_template_id,
        }
    }
}

/// The positioning strategy of VMs on hypervisors. By default, or if set to `no-strategy` our orchestrator determines the most adequate position for your VMs. If set to `attract`, your VMs are deployed on the same hypervisor, which improves network performance. If set to `repulse`, your VMs are deployed on a different hypervisor, which improves fault tolerance.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PositioningStrategy {
    #[serde(rename = "attract")]
    Attract,
    #[serde(rename = "no-strategy")]
    NoStrategy,
    #[serde(rename = "repulse")]
    Repulse,
}

impl Default for PositioningStrategy {
    fn default() -> PositioningStrategy {
        Self::Attract
    }
}
