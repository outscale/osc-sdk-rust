/*
 * 3DS OUTSCALE API
 *
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.26
 * Contact: support@outscale.com
 * Generated by: https://openapi-generator.tech
 */

/// Catalogs : Information about the catalogs.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Catalogs {
    /// One or more catalog entries.
    #[serde(rename = "Entries", skip_serializing_if = "Option::is_none")]
    pub entries: Option<Vec<crate::models::CatalogEntry>>,
    /// The beginning of the time period, in ISO 8601 date-time format.
    #[serde(rename = "FromDate", skip_serializing_if = "Option::is_none")]
    pub from_date: Option<String>,
    /// The state of the catalog (`CURRENT` \\| `OBSOLETE`).
    #[serde(rename = "State", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// The end of the time period, in ISO 8601 date-time format.
    #[serde(rename = "ToDate", skip_serializing_if = "Option::is_none")]
    pub to_date: Option<String>,
}

impl Catalogs {
    /// Information about the catalogs.
    pub fn new() -> Catalogs {
        Catalogs {
            entries: None,
            from_date: None,
            state: None,
            to_date: None,
        }
    }
}

/// The state of the catalog (`CURRENT` \\| `OBSOLETE`).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "CURRENT")]
    CURRENT,
    #[serde(rename = "OBSOLETE")]
    OBSOLETE,
}

impl Default for State {
    fn default() -> State {
        Self::CURRENT
    }
}
