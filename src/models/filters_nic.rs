/*
 * 3DS OUTSCALE API
 *
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/About-the-APIs.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. > > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html). # Pagination Tutorial You can learn more about the pagination methods for read calls in the dedicated [pagination tutorial](https://docs.outscale.com/en/userguide/Tutorial-Paginating-an-API-Request.html). # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * The version of the OpenAPI document: 1.35.4
 * Contact: support@outscale.com
 * Generated by: https://openapi-generator.tech
 */

/// FiltersNic : One or more filters.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FiltersNic {
    /// The descriptions of the NICs.
    #[serde(rename = "Descriptions", skip_serializing_if = "Option::is_none")]
    pub descriptions: Option<Vec<String>>,
    /// Whether the source/destination checking is enabled (true) or disabled (false).
    #[serde(rename = "IsSourceDestCheck", skip_serializing_if = "Option::is_none")]
    pub is_source_dest_check: Option<bool>,
    /// Whether the NICs are deleted when the VMs they are attached to are terminated.
    #[serde(
        rename = "LinkNicDeleteOnVmDeletion",
        skip_serializing_if = "Option::is_none"
    )]
    pub link_nic_delete_on_vm_deletion: Option<bool>,
    /// The device numbers the NICs are attached to.
    #[serde(
        rename = "LinkNicDeviceNumbers",
        skip_serializing_if = "Option::is_none"
    )]
    pub link_nic_device_numbers: Option<Vec<i32>>,
    /// The attachment IDs of the NICs.
    #[serde(rename = "LinkNicLinkNicIds", skip_serializing_if = "Option::is_none")]
    pub link_nic_link_nic_ids: Option<Vec<String>>,
    /// The states of the attachments.
    #[serde(rename = "LinkNicStates", skip_serializing_if = "Option::is_none")]
    pub link_nic_states: Option<Vec<String>>,
    /// The account IDs of the owners of the VMs the NICs are attached to.
    #[serde(
        rename = "LinkNicVmAccountIds",
        skip_serializing_if = "Option::is_none"
    )]
    pub link_nic_vm_account_ids: Option<Vec<String>>,
    /// The IDs of the VMs the NICs are attached to.
    #[serde(rename = "LinkNicVmIds", skip_serializing_if = "Option::is_none")]
    pub link_nic_vm_ids: Option<Vec<String>>,
    /// The account IDs of the owners of the public IPs associated with the NICs.
    #[serde(
        rename = "LinkPublicIpAccountIds",
        skip_serializing_if = "Option::is_none"
    )]
    pub link_public_ip_account_ids: Option<Vec<String>>,
    /// The association IDs returned when the public IPs were associated with the NICs.
    #[serde(
        rename = "LinkPublicIpLinkPublicIpIds",
        skip_serializing_if = "Option::is_none"
    )]
    pub link_public_ip_link_public_ip_ids: Option<Vec<String>>,
    /// The public DNS names associated with the public IPs.
    #[serde(
        rename = "LinkPublicIpPublicDnsNames",
        skip_serializing_if = "Option::is_none"
    )]
    pub link_public_ip_public_dns_names: Option<Vec<String>>,
    /// The allocation IDs returned when the public IPs were allocated to their accounts.
    #[serde(
        rename = "LinkPublicIpPublicIpIds",
        skip_serializing_if = "Option::is_none"
    )]
    pub link_public_ip_public_ip_ids: Option<Vec<String>>,
    /// The public IPs associated with the NICs.
    #[serde(
        rename = "LinkPublicIpPublicIps",
        skip_serializing_if = "Option::is_none"
    )]
    pub link_public_ip_public_ips: Option<Vec<String>>,
    /// The Media Access Control (MAC) addresses of the NICs.
    #[serde(rename = "MacAddresses", skip_serializing_if = "Option::is_none")]
    pub mac_addresses: Option<Vec<String>>,
    /// The IDs of the Nets where the NICs are located.
    #[serde(rename = "NetIds", skip_serializing_if = "Option::is_none")]
    pub net_ids: Option<Vec<String>>,
    /// The IDs of the NICs.
    #[serde(rename = "NicIds", skip_serializing_if = "Option::is_none")]
    pub nic_ids: Option<Vec<String>>,
    /// The private DNS names associated with the primary private IPs.
    #[serde(rename = "PrivateDnsNames", skip_serializing_if = "Option::is_none")]
    pub private_dns_names: Option<Vec<String>>,
    /// The account IDs of the owner of the public IPs associated with the private IPs.
    #[serde(
        rename = "PrivateIpsLinkPublicIpAccountIds",
        skip_serializing_if = "Option::is_none"
    )]
    pub private_ips_link_public_ip_account_ids: Option<Vec<String>>,
    /// The public IPs associated with the private IPs.
    #[serde(
        rename = "PrivateIpsLinkPublicIpPublicIps",
        skip_serializing_if = "Option::is_none"
    )]
    pub private_ips_link_public_ip_public_ips: Option<Vec<String>>,
    /// Whether the private IP is the primary IP associated with the NIC.
    #[serde(
        rename = "PrivateIpsPrimaryIp",
        skip_serializing_if = "Option::is_none"
    )]
    pub private_ips_primary_ip: Option<bool>,
    /// The private IPs of the NICs.
    #[serde(
        rename = "PrivateIpsPrivateIps",
        skip_serializing_if = "Option::is_none"
    )]
    pub private_ips_private_ips: Option<Vec<String>>,
    /// The IDs of the security groups associated with the NICs.
    #[serde(rename = "SecurityGroupIds", skip_serializing_if = "Option::is_none")]
    pub security_group_ids: Option<Vec<String>>,
    /// The names of the security groups associated with the NICs.
    #[serde(rename = "SecurityGroupNames", skip_serializing_if = "Option::is_none")]
    pub security_group_names: Option<Vec<String>>,
    /// The states of the NICs.
    #[serde(rename = "States", skip_serializing_if = "Option::is_none")]
    pub states: Option<Vec<String>>,
    /// The IDs of the Subnets for the NICs.
    #[serde(rename = "SubnetIds", skip_serializing_if = "Option::is_none")]
    pub subnet_ids: Option<Vec<String>>,
    /// The Subregions where the NICs are located.
    #[serde(rename = "SubregionNames", skip_serializing_if = "Option::is_none")]
    pub subregion_names: Option<Vec<String>>,
    /// The keys of the tags associated with the NICs.
    #[serde(rename = "TagKeys", skip_serializing_if = "Option::is_none")]
    pub tag_keys: Option<Vec<String>>,
    /// The values of the tags associated with the NICs.
    #[serde(rename = "TagValues", skip_serializing_if = "Option::is_none")]
    pub tag_values: Option<Vec<String>>,
    /// The key/value combination of the tags associated with the NICs, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.
    #[serde(rename = "Tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

impl FiltersNic {
    /// One or more filters.
    pub fn new() -> FiltersNic {
        FiltersNic {
            descriptions: None,
            is_source_dest_check: None,
            link_nic_delete_on_vm_deletion: None,
            link_nic_device_numbers: None,
            link_nic_link_nic_ids: None,
            link_nic_states: None,
            link_nic_vm_account_ids: None,
            link_nic_vm_ids: None,
            link_public_ip_account_ids: None,
            link_public_ip_link_public_ip_ids: None,
            link_public_ip_public_dns_names: None,
            link_public_ip_public_ip_ids: None,
            link_public_ip_public_ips: None,
            mac_addresses: None,
            net_ids: None,
            nic_ids: None,
            private_dns_names: None,
            private_ips_link_public_ip_account_ids: None,
            private_ips_link_public_ip_public_ips: None,
            private_ips_primary_ip: None,
            private_ips_private_ips: None,
            security_group_ids: None,
            security_group_names: None,
            states: None,
            subnet_ids: None,
            subregion_names: None,
            tag_keys: None,
            tag_values: None,
            tags: None,
        }
    }
}
