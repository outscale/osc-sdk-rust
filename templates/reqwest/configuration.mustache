{{>partial_header}}

{{#withAWSV4Signature}}
use std::time::SystemTime;
use aws_sigv4::http_request::{sign, SigningSettings, SignableRequest, SignableBody};
use aws_sigv4::sign::v4;
use aws_credential_types::Credentials;
use secrecy::{SecretString, ExposeSecret};
{{/withAWSV4Signature}}

#[derive(Debug, Clone)]
pub struct Configuration {
    pub base_path: String,
    pub user_agent: Option<String>,
    pub client: super::middleware::ClientWithBackoff,
    pub basic_auth: Option<BasicAuth>,
    pub oauth_access_token: Option<String>,
    pub bearer_access_token: Option<String>,
    pub api_key: Option<ApiKey>,
    {{#withAWSV4Signature}}
    pub aws_v4_key: Option<AWSv4Key>,
    {{/withAWSV4Signature}}
    // TODO: take an oauth2 token source, similar to the go one
}

pub type BasicAuth = (String, Option<String>);

#[derive(Debug, Clone)]
pub struct ApiKey {
    pub prefix: Option<String>,
    pub key: String,
}

{{#withAWSV4Signature}}
#[derive(Debug, Clone)]
pub struct AWSv4Key {
    pub access_key: String,
    pub secret_key: SecretString,
    pub region: String,
    pub service: String,
}

impl AWSv4Key {
    pub fn sign(&self, uri: &str, method: &str, body: &str) -> Result<Vec::<(String, String)>, aws_sigv4::http_request::SigningError> {
    let identity = Credentials::new(
        self.access_key.as_str(),
        self.secret_key.expose_secret(),
        None,
        None,
        "outscale"
    ).into();
	let signing_settings = SigningSettings::default();
	let signing_params = v4::SigningParams::builder()
        .identity(&identity)
	    .region(self.region.as_str())
	    .name(self.service.as_str())
	    .time(SystemTime::now())
	    .settings(signing_settings)
	    .build()
	    .unwrap()
        .into();
	let signable_request = SignableRequest::new(method, uri, std::iter::empty(), SignableBody::Bytes(body.as_bytes()))?;
	let (signing_instructions, _signature) = sign(signable_request, &signing_params)?.into_parts();
	let mut additional_headers = Vec::<(String, String)>::new();
    for (name, value) in signing_instructions.headers() {
        additional_headers.push((name.to_string(), value.to_string()));
    }
	
    Ok(additional_headers)
    }
}
{{/withAWSV4Signature}}

impl Configuration {
    pub fn new() -> Configuration {
        Configuration::default()
    }
}

impl Default for Configuration {
    fn default() -> Self {
        Configuration {
            base_path: "{{{basePath}}}".to_owned(),
            user_agent: {{#httpUserAgent}}Some("{{{.}}}".to_owned()){{/httpUserAgent}}{{^httpUserAgent}}Some("osc-sdk-rust/{{{packageVersion}}}".to_owned()){{/httpUserAgent}},
            client: super::middleware::ClientWithBackoff::default(),
            basic_auth: None,
            oauth_access_token: None,
            bearer_access_token: None,
            api_key: None,
{{#withAWSV4Signature}}            aws_v4_key: None,{{/withAWSV4Signature}}
        }
    }
}
